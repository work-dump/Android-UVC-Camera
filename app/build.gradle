import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'


android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "humer.uvc_camera"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 74
        versionName "1.7.7"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        customDebugType {
            debuggable false
        }

        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'proguard-project.txt'
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    // TODO silences:
    // [InvalidPackage]: not included in Android: java.awt. Referenced from com.sun.jna.Native.AWT.
    lintOptions {
        abortOnError false
    }
    buildToolsVersion '27.0.3'
    ndkVersion '21.1.6352462'
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
    }

    buildTypes {
        release {
            externalNativeBuild {
                ndkBuild {
                    arguments "BUILD_TYPE=release"
                }}
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable true
            jniDebuggable true
        }
        debug {
            debuggable true
            jniDebuggable true
            externalNativeBuild {
                ndkBuild {
                    cFlags "-DDEBUG=1"
                }
            }
        }
    }
    sourceSets {
        main {
            jniLibs.srcDir 'src/main/libs'
            jni.srcDirs = []
        }
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }

    publishNonDefault true
    packagingOptions {
        pickFirst 'lib/x86_64/libUsb_Support.so'
        pickFirst 'lib/armeabi/libUsb_Support.so'
        pickFirst 'lib/x86/libUsb_Support.so'
        pickFirst 'lib/armeabi-v7a/libUsb_Support.so'
        pickFirst 'lib/arm64-v8a/libUsb_Support.so'

        pickFirst 'lib/x86_64/libusb1.0.so'
        pickFirst 'lib/armeabi/libusb1.0.so'
        pickFirst 'lib/x86/libusb1.0.so'
        pickFirst 'lib/armeabi-v7a/libusb1.0.so'
        pickFirst 'lib/arm64-v8a/libusb1.0.so'

        pickFirst 'lib/x86_64/libuvc.so'
        pickFirst 'lib/armeabi/libuvc.so'
        pickFirst 'lib/x86/libuvc.so'
        pickFirst 'lib/armeabi-v7a/libuvc.so'
        pickFirst 'lib/arm64-v8a/libuvc.so'

        pickFirst 'lib/x86_64/libjpeg.so'
        pickFirst 'lib/armeabi/libjpeg.so'
        pickFirst 'lib/x86/libjpeg.so'
        pickFirst 'lib/armeabi-v7a/libjpeg.so'
        pickFirst 'lib/arm64-v8a/libjpeg.so'

        pickFirst 'lib/x86_64/libyuv.so'
        pickFirst 'lib/armeabi/libyuv.so'
        pickFirst 'lib/x86/libyuv.so'
        pickFirst 'lib/armeabi-v7a/libyuv.so'
        pickFirst 'lib/arm64-v8a/libyuv.so'
    }
}


tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}

String getNdkBuildPath() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkBuildingDir = properties.getProperty("ndk.dir")
    def ndkBuildPath = ndkBuildingDir
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        ndkBuildPath = ndkBuildingDir + '/ndk-build.cmd'
    } else {
        ndkBuildPath = ndkBuildingDir + '/ndk-build'
    }
    return ndkBuildPath
}

task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
    println('executing ndkBuild')
    def ndkBuildPath = getNdkBuildPath();
    commandLine ndkBuildPath, '-j8', '-C', file('src/main').absolutePath
}

task ndkClean(type: Exec, description: 'clean JNI libraries') {
    println('executing ndkBuild clean')
    def ndkBuildPath = getNdkBuildPath();
    commandLine ndkBuildPath, 'clean', '-C', file('src/main').absolutePath
}

clean.dependsOn 'ndkClean'

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'net.java.dev.jna:jna:5.6.0@aar'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support:design:27.1.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    //FabSpeedDial Button
    implementation 'io.github.yavski:fab-speed-dial:1.0.7'

    //AlertDialog
    implementation 'com.crowdfire.cfalertdialog:cfalertdialog:1.1.0'

    //JNA
    implementation 'net.java.dev.jna:jna:5.6.0@aar'

    // WebRtc
    implementation 'org.webrtc:google-webrtc:1.0.22672'

    // @ RequiresApi
    implementation 'com.android.support:support-annotations:28.0.0'

    // Support Translation
    implementation 'com.akexorcist:localizationactivity:1.2.2'

    // TextInputLayout
    implementation 'com.rafakob:floatingedittext:1.0.5'

    //fading TextView
    implementation 'com.tomer:fadingtextview:2.6'

}
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == "com.android.support") {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion "26.+"
            }
        }
    }
}

